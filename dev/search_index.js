var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LumberjackToolkit","category":"page"},{"location":"#LumberjackToolkit","page":"Home","title":"LumberjackToolkit","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LumberjackToolkit.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LumberjackToolkit]","category":"page"},{"location":"#LumberjackToolkit.align_frames-Tuple{String, String}","page":"Home","title":"LumberjackToolkit.align_frames","text":"vmd_trajectory_alignment(psfname::String, trjname::String; new_trajectory=nothing, selection=\"not water\", reference=0, vmd=\"vmd\", DebugVMD=false)\n\nAlign the frames of a trajectory using the VMD measure fit command. The selection can be defined by the user, and the default is not water. The reference frame can be defined by the user, and the default is 0.\n\nArguments\n\npsfname::String: The name of the PSF file.\ntrjname::String: The name of the trajectory file. It can be in any format that VMD can read.\nnew_trajectory::String=nothing: The name of the new DCD trajectory file. The default creates a temporary file.\nselection::String=\"not water\": The selection to be used to align the frames.\nreference=0: The reference frame to be used to align the frames.\nvmd=\"vmd\": The VMD executable. The default is vmd.\nDebugVMD=false: If true, the output of VMD will be printed.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.cellulose_surface-Tuple{String}","page":"Home","title":"LumberjackToolkit.cellulose_surface","text":"surface(rawfile::String; surface_method=\"distance\", selection=\"all\", parameters=\"-res 0.6 -cutoff 4.0\", vmd=\"vmd\")\n\nGenerate a surface from a VMD input file using the volmap plugin. The surface can be generated using different methods, such as distance, density, among others. The default method is distance. The selection can be defined by the user, and the default is all.\n\nThe parameters can be set by the user, and the default is -res 0.6 -cutoff 4.0. The VMD executable can be provided as an argument whether is not on default PATH.\n\nArguments\n\nrawfile::String: The name of the input file without extension. The script will look for rawfile.pdb and rawfile.psf.\nsurface_method::String=\"distance\": The method to be used to generate the surface using the volmap tools. The default is distance.   density       creates a map of the weighted atomic density at each gridpoint. This is done by replacing each atom in the selection with a normalized gaussian distribution       of width (standard deviation) equal to its atomic radius. The gaussian distribution for each atom is then weighted using an optional -weight argument, and       defaults to a weight of one (i.e, the number density). The various gaussians are then additively distributed on a grid.   interp       creates a map with the atomic weights interpolated onto a grid. For each atom, its weight is distributed to the 8 nearest voxels via a trilinear interpolation.       The optional -weight argument defaults to a weight of one.   distance       creates a map for which each gridpoint contains the distance between that point and the edge of the nearest atom. In other words, each gridpoint specifies the       maximum radius of a sphere cnetered at that point which does not intersect with the spheres of any other atoms. All atoms are treated as spheres using the       atoms' VMD radii.   coulomb, coulombmsm       Creates a map of the electrostatic field of the atom selection, made by computing the non-bonded Coulomb potential from each atom in the selection (in units       of k_B.T/e). The coulomb map generation is optimized to take advantage of multi-core CPUs and programmable GPUs if they are available.   ils       Creates a free energy map of the distribution of a weakly-interacting monoatomic or diatomic gas ligand throughout the system using the Implicit Ligand       Sampling (ILS) technique. See additional information about ILS below.   mask       Creates a map which is set to 0 or 1 depending on whether they are within a specified -cutoff distance argument of any atoms in the selection. The mask map is       typically used in combination with other maps in order to hide/mask data that is far from a region of interest.   occupancy       Each grid point is set to either 0 or 1, depending on whether it contains onbe or more atoms or not. When averaged over many frames, this will provide the       fractional occupancy of that grid point. By default, atoms are treated as spheres using the atomic radii and a gridpoint is considered to be \"occupied\" if       it lies inside that sphere. Use the -points argument to treat atoms as points (a grid point is \"occupied\" if its grid cube contains an atom's center). \nselection::String=\"all\": The selection to be used to generate the surface. The default is all.\nparameters::String=\"-res 0.6 -cutoff 4.0\": The parameters to be used in the volmap plugin. The default is -res 0.6 -cutoff 4.0. To understand the parameters,  see the VMD documentation https://www.ks.uiuc.edu/Research/vmd/vmd-1.9.4/ug/node157.html.\nvmd::String=\"vmd\": The VMD executable. The default is vmd.\n\nExamples\n\n\njulia > surface(\"new_crystal\")\n\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.chargesPSF-Tuple{String}","page":"Home","title":"LumberjackToolkit.chargesPSF","text":"chargesPSF(psfname::String)\n\nExtract the partial charges from a PSF file.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.dihedral-NTuple{4, StaticArraysCore.SVector}","page":"Home","title":"LumberjackToolkit.dihedral","text":"dihedral(atom1::StaticArrays.SVector, atom2::StaticArrays.SVector, atom3::StaticArrays.SVector, atom4::StaticArrays.SVector)\n\nCalculate the dihedral angle between four atoms. The dihedral angle is the angle between the planes defined by the atoms (atom1, atom2, atom3) and (atom2, atom3, atom4). The dihedral angle is calculated using the atan method.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.dihedrals-Tuple{String, String, String}","page":"Home","title":"LumberjackToolkit.dihedrals","text":"dihedrals(pdbname::String, trajectory::String, segname::String; ...)\n\nCalculate the dihedral angles and their sum based on the carbohydrate chain. The pdbname carries the atom information, and the trajectory holds the coordinates for each atoms in the simulation. The carbohydrate chain is defined by the segname parameter, that is the same segname present on PDB.\n\nWohlert uses a lot the ϕ(O5'-C1'-O4-C4) and ψ(C1'-O4-C4-C3) definition, while Carol uses ϕ(O5'-C1'-O4-C4) and ψ(C1'-O4-C4-C5)\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.dispm-Tuple{Vector{<:Vector{StaticArraysCore.SVector{3, Float64}}}}","page":"Home","title":"LumberjackToolkit.dispm","text":"dispm(frames::Vector{<:Vector{SVector{3, Float64}}}, weights::Vector{Float64}; weight_method=nothing)\n\nCalculate the displacement matrix of a trajectory with weights.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.lovo_mapping-Tuple{String, String}","page":"Home","title":"LumberjackToolkit.lovo_mapping","text":"map_fractions(atoms::AbstractVector{<:PDBTools.Atom}, trajectory_file::String)\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.msd-Tuple{Vector{Vector{StaticArraysCore.SVector{3, Float64}}}}","page":"Home","title":"LumberjackToolkit.msd","text":"msd(trajectory::Vector{Vector{SVector{3, Float64}}}; step=1, dim=collect(1:3))\n\nCalculate the mean square displacement (MSD) of a trajectory. The MSD is calculated using Green-Kubo relation: <r²(t)> = MSD(t) = 1/N * Σ <[r_i(t) - r_i(0)]²>. It is important to notice that trajectories must have been adjusted to approach:\n\n    traj = [\n                [coord(t1), coord(t2), coord(t3), ..., coord(tmax)],    ## molecule 1\n                [coord(t1), coord(t2), coord(t3), ..., coord(tmax)],    ## molecule 2\n                [coord(t1), coord(t2), coord(t3), ..., coord(tmax)],    ## molecule 3\n                ...\n                [coord(t1), coord(t2), coord(t3), ..., coord(tmax)],    ## molecule N\n        ]\n\nArguments\n\ntrajectory::Vector{Vector{SVector{3, Float64}}}: A vector of vectors of 3D coordinates.\nstep::Int=1: The time step to calculate the MSD.\ndim::Vector{Int}=collect(1:3): The dimensions to calculate the MSD.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.r_avg-Tuple{Vector{<:Vector{StaticArraysCore.SVector{3, Float64}}}}","page":"Home","title":"LumberjackToolkit.r_avg","text":"r_avg(frames::Vector{<:Vector{SVector{3, Float64}}})\n\nCalculate the average position of each atom inside the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.readcoords-Tuple{AbstractVector{<:PDBTools.Atom}, String}","page":"Home","title":"LumberjackToolkit.readcoords","text":"readcoords(atoms::AbstractVector{<:PDBTools.Atom}, pdbname::String)\n\nRead the coordinates of a trajectory in a PDB file. Returns a vector of vectors of coordinates of selected atoms.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.select_atoms-Tuple{Vector{PDBTools.Atom}, String, String, Int64, String}","page":"Home","title":"LumberjackToolkit.select_atoms","text":"select_atoms(atom::Vector{PDBTools.Atom}, name::String, resname::String, resnum::Int64, segname::String)\n\nSelect the atoms that match the given name, residue name, residue number, and segment name.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.simsteps-Tuple{Float64, Float64}","page":"Home","title":"LumberjackToolkit.simsteps","text":"\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.simulation_steps-Tuple{Int64}","page":"Home","title":"LumberjackToolkit.simulation_steps","text":"simulation_steps(t_simulation::Int64; unit=\"ns\", timestep=2.0, output=1000)\n\nThis function calculates the number of steps you need to set and the number of frames that you will get in the MD simulation.\n\nArguments\n\nt_simulation: The total simulation time in the specified unit.\nunit: The unit of the simulation time. It can be \"ns\" (nan\ntimestep: The time step of the simulation in the specified unit.\noutput: The frequency of frame storage during the MD simulation.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.write_frame!-Tuple{IO, AbstractVector{<:PDBTools.Atom}, Chemfiles.Frame}","page":"Home","title":"LumberjackToolkit.write_frame!","text":"write_frame!(trajectory_pdb_file, atoms, frame\n\nWrite a frame of a trajectory in the temporary PDB trajectory file.\n\n\n\n\n\n","category":"method"},{"location":"#LumberjackToolkit.writepdb_trajectory-Tuple{String, String}","page":"Home","title":"LumberjackToolkit.writepdb_trajectory","text":"writepdb_trajectory(pdbname::String, trajectory::String; selection=\"all\", first=1, last=nothing, step=1)\n\nWrite a trajectory in a temporary PDB file. This is very useful when you want to visualize the edited trajectory in VMD. The MDLovoFit program uses this function to write the trajectory in a PDB file before the analysis.\n\n\n\n\n\n","category":"method"}]
}
